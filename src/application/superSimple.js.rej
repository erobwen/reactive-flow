diff a/src/application/superSimple.js b/src/application/superSimple.js	(rejected hunks)
@@ -1,24 +0,58 @@
-import { observable, Flow, flow, repeat } from "../flow/Flow";
-import { text, column, button } from "../flow.components/BasicFlowComponents";
+import { observable, Flow, flow, repeat, readFlowProperties, findTextAndKeyInProperties } from "../flow/Flow";
+import { text, column, button, modalFrame, modal, row } from "../flow.components/BasicFlowComponents";
 import { DOMFlowTarget } from "../flow.DOMTarget/DOMFlowTarget.js";
 import { ClickablePanel } from "../flow.components/ClickablePanel";
 
 const log = console.log;
 
+function dialog(...parameters) {
+  let properties = readFlowProperties(parameters);
+  properties = findTextAndKeyInProperties(properties);
+  return new Dialog(properties);
+}
+
+export class Dialog extends Flow {
+  setProperties({close, text}) {
+    this.close = close; 
+    this.text = text; 
+  }
+
+  build() {
+    return column(
+      text(this.text),
+      button("Close", () => this.close()), 
+      {style: {pointerEvents: "auto"}}
+    )
+  }
+}
+
+
 /**
  * Minimalistic component used for experiments. 
  */
 export class SuperSimple extends Flow {
+  // Lifecycle function build is run reactivley on any change, either in the model or in the view model. It reads data from anywhere in the model or view model, and the system automatically infers all dependencies.
+  setProperties({}) {
+    // Object.assign(this, properties)
+    this.name = "Modal Example";
+  }
+
   setState() {
-    this.showText = true; 
+    this.showModal = false;
   }
 
   build() {
-    return column(
-      button("foo", "Foo", ()=> { this.showText = !this.showText}),
-      text("Some text", {animate: true, key: "my-text"}).show(this.showText),
-      new ClickablePanel({mouseOverBackgroundColor: "red", style: {width: "400px", padding: "20px", height: "100px", backgroundColor: "blue"}, onClick: () => {console.log("hello")}}),
-      {style: {fontSize: "40px", padding: "20px"}}
+
+    return (
+      modalFrame(
+        column(
+          button("Open Modal", ()=> {log("SHOW");this.showModal = true;}),
+          modal(
+            "modal",
+            dialog("dialog", "Modal!", {close: () => {log("CLOSE"); this.showModal = false}})
+            ).show(this.showModal)
+        )
+      )
     );
   }
 }
